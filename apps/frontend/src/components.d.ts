/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AliasTokenFormAction, AliasTokenFormData, DesignTokenFormAction, DesignTokenFormData, FormIntegrationActions, FormIntegrations, StyleFormAction, StyleFormData, StyleGuideFormAction, StyleGuideFormData, ThemeFormAction, ThemeFormData, ThemeValueFormAction, ThemeValueFormData } from "@typings";
import { NavigationItem } from "../../../libs/themeful-ui/src/components/navigation/navigation.component";
export namespace Components {
    interface TfAliasTokenForm {
        /**
          * Data for the form
         */
        "formData": AliasTokenFormData;
    }
    interface TfDesignTokenForm {
        /**
          * Data for the form
         */
        "formData": DesignTokenFormData;
    }
    interface TfFormIntegration {
        /**
          * FormData
         */
        "formData$": Subject<FormIntegrations>;
    }
    interface TfNavigation {
        /**
          * Active state
         */
        "active": string;
        /**
          * Items
         */
        "items": NavigationItem[];
        /**
          * Navigation size
         */
        "size": 'small' | 'large';
    }
    interface TfStyleForm {
        /**
          * Data for the form
         */
        "formData": StyleFormData;
    }
    interface TfStyleGuideForm {
        /**
          * Data for the form
         */
        "formData": StyleGuideFormData;
    }
    interface TfThemeForm {
        /**
          * Data for the form
         */
        "formData": ThemeFormData;
    }
    interface TfThemeValueForm {
        /**
          * Data for the form
         */
        "formData": ThemeValueFormData;
    }
    interface ThemefulMicrofrontend {
    }
}
declare global {
    interface HTMLTfAliasTokenFormElement extends Components.TfAliasTokenForm, HTMLStencilElement {
    }
    var HTMLTfAliasTokenFormElement: {
        prototype: HTMLTfAliasTokenFormElement;
        new (): HTMLTfAliasTokenFormElement;
    };
    interface HTMLTfDesignTokenFormElement extends Components.TfDesignTokenForm, HTMLStencilElement {
    }
    var HTMLTfDesignTokenFormElement: {
        prototype: HTMLTfDesignTokenFormElement;
        new (): HTMLTfDesignTokenFormElement;
    };
    interface HTMLTfFormIntegrationElement extends Components.TfFormIntegration, HTMLStencilElement {
    }
    var HTMLTfFormIntegrationElement: {
        prototype: HTMLTfFormIntegrationElement;
        new (): HTMLTfFormIntegrationElement;
    };
    interface HTMLTfNavigationElement extends Components.TfNavigation, HTMLStencilElement {
    }
    var HTMLTfNavigationElement: {
        prototype: HTMLTfNavigationElement;
        new (): HTMLTfNavigationElement;
    };
    interface HTMLTfStyleFormElement extends Components.TfStyleForm, HTMLStencilElement {
    }
    var HTMLTfStyleFormElement: {
        prototype: HTMLTfStyleFormElement;
        new (): HTMLTfStyleFormElement;
    };
    interface HTMLTfStyleGuideFormElement extends Components.TfStyleGuideForm, HTMLStencilElement {
    }
    var HTMLTfStyleGuideFormElement: {
        prototype: HTMLTfStyleGuideFormElement;
        new (): HTMLTfStyleGuideFormElement;
    };
    interface HTMLTfThemeFormElement extends Components.TfThemeForm, HTMLStencilElement {
    }
    var HTMLTfThemeFormElement: {
        prototype: HTMLTfThemeFormElement;
        new (): HTMLTfThemeFormElement;
    };
    interface HTMLTfThemeValueFormElement extends Components.TfThemeValueForm, HTMLStencilElement {
    }
    var HTMLTfThemeValueFormElement: {
        prototype: HTMLTfThemeValueFormElement;
        new (): HTMLTfThemeValueFormElement;
    };
    interface HTMLThemefulMicrofrontendElement extends Components.ThemefulMicrofrontend, HTMLStencilElement {
    }
    var HTMLThemefulMicrofrontendElement: {
        prototype: HTMLThemefulMicrofrontendElement;
        new (): HTMLThemefulMicrofrontendElement;
    };
    interface HTMLElementTagNameMap {
        "tf-alias-token-form": HTMLTfAliasTokenFormElement;
        "tf-design-token-form": HTMLTfDesignTokenFormElement;
        "tf-form-integration": HTMLTfFormIntegrationElement;
        "tf-navigation": HTMLTfNavigationElement;
        "tf-style-form": HTMLTfStyleFormElement;
        "tf-style-guide-form": HTMLTfStyleGuideFormElement;
        "tf-theme-form": HTMLTfThemeFormElement;
        "tf-theme-value-form": HTMLTfThemeValueFormElement;
        "themeful-microfrontend": HTMLThemefulMicrofrontendElement;
    }
}
declare namespace LocalJSX {
    interface TfAliasTokenForm {
        /**
          * Data for the form
         */
        "formData"?: AliasTokenFormData;
        /**
          * Event emitted when an action is triggered
         */
        "onAction"?: (event: CustomEvent<AliasTokenFormAction>) => void;
    }
    interface TfDesignTokenForm {
        /**
          * Data for the form
         */
        "formData"?: DesignTokenFormData;
        /**
          * Event emitted when an action is triggered
         */
        "onAction"?: (event: CustomEvent<DesignTokenFormAction>) => void;
    }
    interface TfFormIntegration {
        /**
          * FormData
         */
        "formData$"?: Subject<FormIntegrations>;
        /**
          * Event emitted when an action is triggered
         */
        "onAction"?: (event: CustomEvent<FormIntegrationActions>) => void;
    }
    interface TfNavigation {
        /**
          * Active state
         */
        "active"?: string;
        /**
          * Items
         */
        "items"?: NavigationItem[];
        /**
          * Input Event
         */
        "onItemClick"?: (event: CustomEvent<any>) => void;
        /**
          * Navigation size
         */
        "size"?: 'small' | 'large';
    }
    interface TfStyleForm {
        /**
          * Data for the form
         */
        "formData"?: StyleFormData;
        /**
          * Event emitted when an action is triggered
         */
        "onAction"?: (event: CustomEvent<StyleFormAction>) => void;
    }
    interface TfStyleGuideForm {
        /**
          * Data for the form
         */
        "formData"?: StyleGuideFormData;
        /**
          * Event emitted when an action is triggered
         */
        "onAction"?: (event: CustomEvent<StyleGuideFormAction>) => void;
    }
    interface TfThemeForm {
        /**
          * Data for the form
         */
        "formData"?: ThemeFormData;
        /**
          * Event emitted when an action is triggered
         */
        "onAction"?: (event: CustomEvent<ThemeFormAction>) => void;
    }
    interface TfThemeValueForm {
        /**
          * Data for the form
         */
        "formData"?: ThemeValueFormData;
        /**
          * Event emitted when an action is triggered
         */
        "onAction"?: (event: CustomEvent<ThemeValueFormAction>) => void;
    }
    interface ThemefulMicrofrontend {
    }
    interface IntrinsicElements {
        "tf-alias-token-form": TfAliasTokenForm;
        "tf-design-token-form": TfDesignTokenForm;
        "tf-form-integration": TfFormIntegration;
        "tf-navigation": TfNavigation;
        "tf-style-form": TfStyleForm;
        "tf-style-guide-form": TfStyleGuideForm;
        "tf-theme-form": TfThemeForm;
        "tf-theme-value-form": TfThemeValueForm;
        "themeful-microfrontend": ThemefulMicrofrontend;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "tf-alias-token-form": LocalJSX.TfAliasTokenForm & JSXBase.HTMLAttributes<HTMLTfAliasTokenFormElement>;
            "tf-design-token-form": LocalJSX.TfDesignTokenForm & JSXBase.HTMLAttributes<HTMLTfDesignTokenFormElement>;
            "tf-form-integration": LocalJSX.TfFormIntegration & JSXBase.HTMLAttributes<HTMLTfFormIntegrationElement>;
            "tf-navigation": LocalJSX.TfNavigation & JSXBase.HTMLAttributes<HTMLTfNavigationElement>;
            "tf-style-form": LocalJSX.TfStyleForm & JSXBase.HTMLAttributes<HTMLTfStyleFormElement>;
            "tf-style-guide-form": LocalJSX.TfStyleGuideForm & JSXBase.HTMLAttributes<HTMLTfStyleGuideFormElement>;
            "tf-theme-form": LocalJSX.TfThemeForm & JSXBase.HTMLAttributes<HTMLTfThemeFormElement>;
            "tf-theme-value-form": LocalJSX.TfThemeValueForm & JSXBase.HTMLAttributes<HTMLTfThemeValueFormElement>;
            "themeful-microfrontend": LocalJSX.ThemefulMicrofrontend & JSXBase.HTMLAttributes<HTMLThemefulMicrofrontendElement>;
        }
    }
}
